"""
Autogenerate docstrings.
"""
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import os
import shutil

PAGES = [
  {
    'page': 'criticism.tex',
    'source_pages': [
      'criticisms/',
    ],
    'child_pages': [],
  },
  {
    'page': 'inference.tex',
    'source_pages': [
      'inferences/inference.py',
    ],
    'child_pages': [
      'monte-carlo.tex',
      'variational-inference.tex',
    ],
  },
  {
    'page': 'monte-carlo.tex',
    'source_pages': [
      'inferences/monte_carlo.py',
    ],
    'child_pages': [],
  },
  {
    'page': 'variational-inference.tex',
    'source_pages': [
      'inferences/klpq.py',
      'inferences/klqp.py',
      'inferences/map.py',
      'inferences/variational_inference.py',
    ],
    'child_pages': [],
  },
  {
    'page': 'model.tex',
    'source_pages': [
      'models/',
    ],
    'child_pages': [],
  },
  {
    'page': 'stats.tex',
    'source_pages': [
      'stats/',
    ],
    'child_pages': [],
  },
  {
    'page': 'util.tex',
    'source_pages': [
      'util.py',
    ],
    'child_pages': [],
  },
]

print("Populating build/ directory with files from tex/api/.")
for subdir, dirs, fnames in os.walk('tex/api'):
  for fname in fnames:
    new_subdir = subdir.replace('tex/api', 'build')
    if not os.path.exists(new_subdir):
      os.makedirs(new_subdir)

    if fname[-4:] == '.tex':
      fpath = os.path.join(subdir, fname)
      new_fpath = fpath.replace('tex/api', 'build')
      shutil.copy(fpath, new_fpath)

print("Starting docstring autogeneration.")
for page in PAGES:
  page_name = page['page']
  source_pages = page['source_pages']
  child_pages = page['child_pages']

  # Generate all docstrings in `source_pages`.
  # TODO

  # TODO assuming generated docstring is `docstring`
  # Either insert content into existing page, or create page otherwise.
  path = os.path.join('build', page_name)
  if os.path.exists(path):
    document = open(path).read()
    assert '{{autogenerated}}' in document, \
      ("File found for " + path + " but missing {{autogenerated}} tag.")
    print("...inserting autogenerated content into file:", path)
    document = document.replace('{{autogenerated}}', docstring)
  else:
    print("...creating new file with autogenerated content:", path)
    # TODO
    document = docstring

  # Add table of contents subbody to files with child pages.
  print("...inserting Table of Content subbody:", path)
  if len(child_pages) >= 0:
    # TODO format toc_subbody to include links to child pages
    toc_subbody = ""
  else:
    toc_subbody = ""

  if os.path.exists(path):
    assert '{{toc subbody}}' in document, \
      ("File found for " + path + " but missing {{toc subbody}} tag.")
    document = document.replace('{{toc subbody}}', toc_subbody)
  else:
    # TODO add toc_subbody manually depending on structure of 'docstring'

  subdir = os.path.dirname(path)
  if not os.path.exists(subdir):
    os.makedirs(subdir)

  print("...writing file:", path)
  open(path, 'w').write(document)
